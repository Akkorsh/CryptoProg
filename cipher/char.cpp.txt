#include <iostream>
#include <fstream>
#include <string>
#include <cryptopp/cryptlib.h>
#include <cryptopp/filters.h>
#include <cryptopp/files.h>
#include <cryptopp/modes.h>
#include <cryptopp/aes.h>
#include <cryptopp/sha.h>
#include <cryptopp/hex.h>
#include <cryptopp/pwdbased.h>
#include <cryptopp/osrng.h>

using namespace CryptoPP;
using namespace std;

SecByteBlock generateKeyFromPassword(const string& password) {
SecByteBlock key(AES::DEFAULT_KEYLENGTH);
PKCS5_PBKDF2_HMAC<SHA256> pbkdf2;
pbkdf2.DeriveKey(key, key.size(), 0, (byte*)password.data(), password.size(), (byte*)password.data(), password.size(), 1000);
return key;
}

void encryptFile(const string& inputFile, const string& outputFile, const string& password) {
SecByteBlock key = generateKeyFromPassword(password);
SecByteBlock iv(AES::BLOCKSIZE);

AutoSeededRandomPool prng;
prng.GenerateBlock(iv, iv.size());

ofstream encryptedFile(outputFile, ios::binary);

// Записываем инициализационный вектор в начало зашифрованного файла
encryptedFile.write(reinterpret_cast<const char*>(iv.data()), iv.size());

CBC_Mode<AES>::Encryption encryptor;
encryptor.SetKeyWithIV(key, key.size(), iv);

FileSource(inputFile.c_str(), true, new StreamTransformationFilter(encryptor, new FileSink(encryptedFile)));
}

void decryptFile(const string& inputFile, const string& outputFile, const string& password) {
SecByteBlock key = generateKeyFromPassword(password);
SecByteBlock iv(AES::BLOCKSIZE);

ifstream encryptedFile(inputFile, ios::binary);

// Считываем инициализационный вектор из начала зашифрованного файла
encryptedFile.read(reinterpret_cast<char*>(iv.data()), iv.size());

CBC_Mode<AES>::Decryption decryptor;
decryptor.SetKeyWithIV(key, key.size(), iv);

FileSource(encryptedFile, true, new StreamTransformationFilter(decryptor, new FileSink(outputFile.c_str())));
}

int main() {
int choice;
cout « "Выберите режим работы (1 - зашифрование, 2 - расшифрование): ";
cin » choice;

string inputFile, outputFile, password;

cout « "Введите имя входного файла: ";
cin » inputFile;

cout « "Введите имя выходного файла: ";
cin » outputFile;

cout « "Введите пароль: ";
cin » password;

if (choice == 1) {
encryptFile(inputFile, outputFile, password);
cout « "Файл успешно зашифрован." « endl;
} else if (choice == 2) {
decryptFile(inputFile, outputFile, password);
cout « "Файл успешно расшифрован." « endl;
} else {
cerr « "Некорректный выбор режима работы." « endl;
return 1;
}

return 0;
}